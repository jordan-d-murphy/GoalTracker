// <auto-generated />
using System;
using GoalTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoalTracker.Migrations
{
    [DbContext(typeof(GoalTrackerContext))]
    partial class GoalTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomTag")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoalTracker.Models.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Billing");
                });

            modelBuilder.Entity("GoalTracker.Models.Kai", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prompt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kai");
                });

            modelBuilder.Entity("GoalTracker.Models.MetricType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetricType");
                });

            modelBuilder.Entity("GoalTracker.Models.ReactionEmoji", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TrackingRecordId");

                    b.ToTable("ReactionEmoji");
                });

            modelBuilder.Entity("GoalTracker.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingFrequency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tier")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("GoalTracker.Models.TrackingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Favorited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StatusId");

                    b.ToTable("TrackingRecord");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TrackingRecord");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GoalTracker.Models.VizType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VizType");
                });

            modelBuilder.Entity("GoalTracker.Models.ActivityEntry", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("ActivityEntry");
                });

            modelBuilder.Entity("GoalTracker.Models.Calendar", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("Calendar");
                });

            modelBuilder.Entity("GoalTracker.Models.Dash", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Dash_Name");
                        });

                    b.HasDiscriminator().HasValue("Dash");
                });

            modelBuilder.Entity("GoalTracker.Models.DashViz", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<Guid?>("DashId")
                        .HasColumnType("TEXT");

                    b.Property<string>("JSONData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasIndex("DashId");

                    b.HasIndex("TypeId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("JSONData")
                                .HasColumnName("DashViz_JSONData");

                            t.Property("Name")
                                .HasColumnName("DashViz_Name");

                            t.Property("TypeId")
                                .HasColumnName("DashViz_TypeId");
                        });

                    b.HasDiscriminator().HasValue("DashViz");
                });

            modelBuilder.Entity("GoalTracker.Models.FileAttachment", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("FileExtension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasIndex("TrackingRecordId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("TrackingRecordId")
                                .HasColumnName("FileAttachment_TrackingRecordId");

                            t.Property("Url")
                                .HasColumnName("FileAttachment_Url");
                        });

                    b.HasDiscriminator().HasValue("FileAttachment");
                });

            modelBuilder.Entity("GoalTracker.Models.Goal", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("Goal");
                });

            modelBuilder.Entity("GoalTracker.Models.History", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasIndex("TrackingRecordId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("TrackingRecordId")
                                .HasColumnName("History_TrackingRecordId");

                            t.Property("Url")
                                .HasColumnName("History_Url");
                        });

                    b.HasDiscriminator().HasValue("History");
                });

            modelBuilder.Entity("GoalTracker.Models.Link", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasIndex("TrackingRecordId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("TrackingRecordId")
                                .HasColumnName("Link_TrackingRecordId");
                        });

                    b.HasDiscriminator().HasValue("Link");
                });

            modelBuilder.Entity("GoalTracker.Models.Metric", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("JSONData")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("JSONData")
                                .HasColumnName("Metric_JSONData");

                            t.Property("Name")
                                .HasColumnName("Metric_Name");
                        });

                    b.HasDiscriminator().HasValue("Metric");
                });

            modelBuilder.Entity("GoalTracker.Models.Milestone", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("Milestone");
                });

            modelBuilder.Entity("GoalTracker.Models.Note", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TrackingRecordId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("TrackingRecordId")
                                .HasColumnName("Note_TrackingRecordId");
                        });

                    b.HasDiscriminator().HasValue("Note");
                });

            modelBuilder.Entity("GoalTracker.Models.Project", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Project");
                });

            modelBuilder.Entity("GoalTracker.Models.RecordPriority", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<int?>("PriorityInt")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("RecordPriority");
                });

            modelBuilder.Entity("GoalTracker.Models.RecordStatus", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("RecordStatus");
                });

            modelBuilder.Entity("GoalTracker.Models.Report", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("JSONData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TypeId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("JSONData")
                                .HasColumnName("Report_JSONData");

                            t.Property("Name")
                                .HasColumnName("Report_Name");

                            t.Property("TypeId")
                                .HasColumnName("Report_TypeId");
                        });

                    b.HasDiscriminator().HasValue("Report");
                });

            modelBuilder.Entity("GoalTracker.Models.Roadmap", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("Roadmap");
                });

            modelBuilder.Entity("GoalTracker.Models.Settings", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("JSONData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TypeId");

                    b.ToTable("TrackingRecord", t =>
                        {
                            t.Property("JSONData")
                                .HasColumnName("Settings_JSONData");

                            t.Property("Name")
                                .HasColumnName("Settings_Name");
                        });

                    b.HasDiscriminator().HasValue("Settings");
                });

            modelBuilder.Entity("GoalTracker.Models.SupportRequest", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("SupportRequest");
                });

            modelBuilder.Entity("GoalTracker.Models.Tag", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<Guid?>("TrackingRecordId")
                        .HasColumnType("TEXT");

                    b.HasIndex("TrackingRecordId");

                    b.HasDiscriminator().HasValue("Tag");
                });

            modelBuilder.Entity("GoalTracker.Models.Team", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("GoalTracker.Models.Template", b =>
                {
                    b.HasBaseType("GoalTracker.Models.TrackingRecord");

                    b.Property<string>("JSONData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Template");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationRoleClaim", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("GoalTracker.Models.Team", null)
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserClaim", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUserToken", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoalTracker.Models.Billing", b =>
                {
                    b.HasOne("GoalTracker.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoalTracker.Models.ReactionEmoji", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GoalTracker.Models.TrackingRecord", null)
                        .WithMany("ReactionEmojis")
                        .HasForeignKey("TrackingRecordId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("GoalTracker.Models.TrackingRecord", b =>
                {
                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GoalTracker.Models.TrackingRecord", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("GoalTracker.Models.RecordPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("GoalTracker.Areas.Identity.Data.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("GoalTracker.Models.RecordStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Assignee");

                    b.Navigation("CreatedBy");

                    b.Navigation("Parent");

                    b.Navigation("Priority");

                    b.Navigation("Reviewer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GoalTracker.Models.DashViz", b =>
                {
                    b.HasOne("GoalTracker.Models.Dash", null)
                        .WithMany("Vizualizations")
                        .HasForeignKey("DashId");

                    b.HasOne("GoalTracker.Models.VizType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GoalTracker.Models.FileAttachment", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", null)
                        .WithMany("FileAttachments")
                        .HasForeignKey("TrackingRecordId");
                });

            modelBuilder.Entity("GoalTracker.Models.History", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", "TrackingRecord")
                        .WithMany()
                        .HasForeignKey("TrackingRecordId");

                    b.Navigation("TrackingRecord");
                });

            modelBuilder.Entity("GoalTracker.Models.Link", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", null)
                        .WithMany("Links")
                        .HasForeignKey("TrackingRecordId");
                });

            modelBuilder.Entity("GoalTracker.Models.Note", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", null)
                        .WithMany("Notes")
                        .HasForeignKey("TrackingRecordId");
                });

            modelBuilder.Entity("GoalTracker.Models.Project", b =>
                {
                    b.HasOne("GoalTracker.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GoalTracker.Models.Report", b =>
                {
                    b.HasOne("GoalTracker.Models.VizType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GoalTracker.Models.Settings", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GoalTracker.Models.Tag", b =>
                {
                    b.HasOne("GoalTracker.Models.TrackingRecord", null)
                        .WithMany("Tags")
                        .HasForeignKey("TrackingRecordId");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoalTracker.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoalTracker.Models.TrackingRecord", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FileAttachments");

                    b.Navigation("Links");

                    b.Navigation("Notes");

                    b.Navigation("ReactionEmojis");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("GoalTracker.Models.Dash", b =>
                {
                    b.Navigation("Vizualizations");
                });

            modelBuilder.Entity("GoalTracker.Models.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
